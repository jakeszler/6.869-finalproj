/******************************************************************************
 *  Copyright (c) 2018, Xilinx, Inc.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1.  Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *  2.  Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *
 *  3.  Neither the name of the copyright holder nor the names of its 
 *      contributors may be used to endorse or promote products derived from 
 *      this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION). HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/
/*****************************************************************************
*
*     Author: Kristof Denolf <kristof@xilinx.com>
*     Date:   2018/05/11
*
*****************************************************************************/
///SDx temporal fix for Clang issue
#ifdef __SDSCC__
#undef __ARM_NEON__
#undef __ARM_NEON
#include <opencv2/core/core.hpp>
#define __ARM_NEON__
#define __ARM_NEON
#else
#include <opencv2/core/core.hpp>
#endif 
 
#include <Utils/inc/UtilsForXfOpenCV.h>
#include "xfAccumulateWeightedCoreForVivadoHLS.h"

namespace xF {  
 
	void accumulateWeighted(cv::Mat &src, cv::Mat &dst, double alpha, cv::Mat mask)
	{  	
		const int srcTypeTP 	= ${srcTypeCMakeParamAccumulateWeighted};  
		const int dstTypeTP 	= ${dstTypeCMakeParamAccumulateWeighted};  
		const int maxWidthTP 	= ${maxWidthCMakeParamAccumulateWeighted};
		const int maxHeightTP	= ${maxHeightCMakeParamAccumulateWeighted};	
		const int NPCTP				= ${NPCCMakeParamAccumulateWeighted};
	
		//check for limitations of xfOpenCV module
		//run-time
		assert(src.channels() 	== 1);	// must be one channel 
		assert(dst.channels() 	== 1); 	// must be one channel
		//assert(dst.type() 	== 2); 		// must be XF_16U 
	
		xf::Mat<srcTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgInput1;
		xf::Mat<srcTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgInput2;
		xf::Mat<dstTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgOutput;

		// perform some checks on the src type
		cvToXfSource(src, imgInput1);	 
		cvToXfSource(dst, imgInput2);
		        
		// perform some checks on the dst type
		bool dstPostConversion = cvToXfDestination(dst, imgOutput, src, CV_16U); 
		//convert double to float
		float alphaHLS= (float) alpha;
		// call xF_accumulateWeighted
		xF_accumulateWeighted(imgInput1, imgInput2, imgOutput, alphaHLS);

		//perform checks on the dst type
		if (dstPostConversion) {
			xfMatDepthPostConversion(dst,imgOutput);
		}
	
		delete imgInput1;	
		delete imgInput2;
		delete imgOutput;
	
		return;
	}
}

