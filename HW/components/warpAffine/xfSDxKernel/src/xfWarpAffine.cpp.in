/******************************************************************************
 *  Copyright (c) 2018, Xilinx, Inc.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1.  Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *  2.  Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *
 *  3.  Neither the name of the copyright holder nor the names of its 
 *      contributors may be used to endorse or promote products derived from 
 *      this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION). HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/
 
/*****************************************************************************
*
*
*     Author: Kristof Denolf <kristof@xilinx.com>
*     Date:   2018/01/22
*
*****************************************************************************/

///SDx temporal fix for Clang issue
#ifdef __SDSCC__
#undef __ARM_NEON__
#undef __ARM_NEON
#include <opencv2/core/core.hpp>
#define __ARM_NEON__
#define __ARM_NEON
#else
#include <opencv2/core/core.hpp>
#endif 

#include <opencv2/imgproc/imgproc.hpp> 
#include <Utils/inc/UtilsForXfOpenCV.h>
#include "xfWarpAffineCoreForVivadoHLS.h"

#define PI 3.141592654
#define TWO_POW_16	65536

namespace xF 
{ 
	void warpAffine(cv::Mat &src, cv::Mat &dst, cv::Mat &M, cv::Size dsize, int flags, int borderType, const cv::Scalar& borderValue)
	{
		const int interpolationTypeTP	= ${interpolationTypeCMakeParamWarpAffine}; 
		const int maxWidthTP			= ${maxWidthCMakeParamWarpAffine};
		const int maxHeightTP 			= ${maxHeightCMakeParamWarpAffine};
		const int srcTypeTP 			= ${srcTypeCMakeParamWarpAffine};
		const int dstTypeTP 			= ${srcTypeCMakeParamWarpAffine};
		const int NPCTP 				= ${NPCCMakeParamWarpAffine};
	
		//check for limitations of xfOpenCV module
		//run-time
		assert(src.channels() == 1);
		assert(dst.channels() == 1); 
	
	
		xf::Mat<srcTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgInput;
		xf::Mat<dstTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgOutput;
		float *transform_matrix; 

		cv::Mat temp_matrix;
		cv::invertAffineTransform(M,temp_matrix);
		 	
		#if __SDSCC__
			transform_matrix=(float*)sds_alloc(6*sizeof(float));
		#else
			transform_matrix=(float*)malloc(6*sizeof(float));
		#endif
		transform_matrix[0] = (float) temp_matrix.at<double>(0,0);
		transform_matrix[1] = (float) temp_matrix.at<double>(0,1);
		transform_matrix[2] = (float) temp_matrix.at<double>(0,2);
		transform_matrix[3] = (float) temp_matrix.at<double>(1,0);
		transform_matrix[4] = (float) temp_matrix.at<double>(1,1);
		transform_matrix[5] = (float) temp_matrix.at<double>(1,2);
			
		// perform some checks on the src type
		cvToXfSource(src, imgInput); 
	
		// perform some checks on the dst type
		bool dstPostConversion = cvToXfDestination(dst, imgOutput, src);    

		//std::cout << "calling HW warpAffine" << std::endl;
		// call xf::wrapAffine
		xF_warpAffine(imgInput,imgOutput, transform_matrix);
		//std::cout << "Done: HW warpAffine" << std::endl;

		 // If SW post conversion required, we do it here
		 if (dstPostConversion) {
			xfMatDepthPostConversion(dst,imgOutput);
		 }   
	
		delete imgInput;
		delete imgOutput;
		
		#if __SDSCC__
			sds_free(transform_matrix);
		#else
			free(transform_matrix);
		#endif
	
		return;
	}
}
 
